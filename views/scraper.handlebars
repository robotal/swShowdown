<div id='header'>
    <h1>There will be something here one day!</h1>

    <button id='loadButton' type="button" name="button">Scrape Wiki</button>
</div>

<div id="view">
</div>

<script>
    var fullObj = {};

    $('#loadButton').on('click', function() {
        console.clear();
        var links;

        $.ajax({
            url: "http://localhost:3000/public/files/monsterLinks.txt",
            dataType: 'text',
            async: false,
            success: function(data) {
                links = data.split('\n');
            }
        });

        for (var i in links) {
            visitMonsterPage(links[i].trim(), fullObj);
            wait(10);
        }
        console.log('visited all links!');
        console.log(fullObj);
    });

    function visitMonsterPage(linkEnding, fullObj) {

        var url = 'https://crossorigin.me/http://summonerswar.wikia.com' + linkEnding;

        let promise = new Promise((resolve, reject) => {
            $.ajax({
                url: url,
                dataType: 'text',
                async: false,
                success: function(data) {
                    //load in data, start logging everything to store

                    var monsterObj = {};

                    $('#view').html(data);
                    var monsterName = $('.header-column h1').text();
                    if (monsterName.match(/(.*) - (.*)/)) {
                        var match = monsterName.match(/(.*) - (.*)/);
                        var monster = match[1].split(' ').join('_');
                        var awakenedName = match[2];

                        var innerMatch = match[1].match(/(.*) \((.*)\)/);

                        var family = innerMatch[1];
                        var type = innerMatch[2];

                        monsterObj.family = family;
                        monsterObj.type = type;
                        monsterObj.awakens = true;
                        monsterObj.awakenedName = awakenedName;

                        fullObj[monster] = monsterObj;
                    } else {
                        var monster = monsterName.split(' ').join('_');

                        var innerMatch = monsterName.match(/(.*) \((.*)\)/);
                        var family = innerMatch[1];
                        var type = innerMatch[2];

                        monsterObj.family = family;
                        monsterObj.type = type;
                        monsterObj.awakens = false;

                        fullObj[monster] = monsterObj;
                    }

                    console.log(monsterObj);
                }
            });
        });

        promise.then((succ) => {
            console.log('returning');
            return;
        });
    }

    function wait(ms) {
        var start = new Date().getTime();
        var end = start;
        while (end < start + ms) {
            end = new Date().getTime();
        }
    }

    (function(console) {

        console.save = function(data, filename) {

            if (!data) {
                console.error('Console.save: No data')
                return;
            }

            if (!filename) filename = 'console.json'

            if (typeof data === "object") {
                data = JSON.stringify(data, undefined, 4)
            }

            var blob = new Blob([data], {
                    type: 'text/json'
                }),
                e = document.createEvent('MouseEvents'),
                a = document.createElement('a')

            a.download = filename
            a.href = window.URL.createObjectURL(blob)
            a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')
            e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)
            a.dispatchEvent(e)
        }
    })(console)
</script>
